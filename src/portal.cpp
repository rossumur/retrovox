//
//  portal.cpp
//  RetroVox
//
//  Created by Peter Barrett on 2/5/22.
//  Copyright Â© 2022 Peter Barrett. All rights reserved.
//

#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include "streamer.h"
#include "terminal.h"
#define LOAD_PREFIX "file:///demo/portal/"

void dither8rg(const uint8_t* src, uint8_t* red, uint8_t* green, int width, int height);
void dither8rg_noise(const uint8_t* src, uint8_t* red, uint8_t* green, int width, int height);

const int16_t level[] =
{
  // sizes 7
  6,4,202,48,464,112,172,
  // hdr 4
  0,0,0,0,
  // vertexes 202
  -14,-7,-14,2,-14,6,-14,16,-7,14,2,14,14,11,13,-6,
  -27,7,-17,17,-35,17,-20,21,-34,29,-20,24,-27,39,-18,28,
  -15,42,-14,30,16,-7,26,7,17,-9,34,-1,17,-12,34,-14,
  15,-15,26,-27,12,-16,13,-32,-24,-38,-26,-27,-25,-18,-16,-12,
  -4,-10,3,-11,13,-40,0,-44,-13,-44,-2,22,-3,58,17,45,
  17,36,25,45,23,72,38,72,37,45,45,45,67,56,67,24,
  45,36,25,36,37,36,37,13,24,13,50,69,58,65,58,17,
  50,13,56,84,71,72,56,-4,64,0,59,-12,68,-6,43,-33,
  90,-7,108,-36,97,-62,84,-68,58,-64,-6,19,1,19,-9,56,
  -5,64,2,63,-21,61,-15,72,-32,57,-33,76,86,-72,100,-66,
  94,-88,108,-81,-72,-2,-58,3,-52,6,-42,9,-28,-17,-30,-26,
  -37,-30,-44,-33,-58,-35,-60,8,-54,10,-83,84,-76,86,66,96,
  82,85,77,109,93,98,88,122,104,112,
  // seg_ptr 48
  0,9,14,19,24,29,34,39,44,49,50,52,57,62,74,79,
  84,89,94,99,104,111,118,123,128,133,138,143,152,157,159,160,
  161,162,168,170,175,180,185,190,200,205,210,212,217,222,227,232,
  // seg_data 464
  0,0,0,6,1,6,2,128,3,15,4,129,5,15,6,130,
  7,15,1,0,2,7,8,131,9,15,3,132,2,0,8,15,
  10,133,11,3,9,128,3,0,10,7,12,134,13,15,11,131,
  4,0,12,15,14,135,15,15,13,133,5,0,14,7,16,136,
  17,7,15,134,6,0,18,6,7,132,6,9,19,137,7,0,
  20,9,18,130,19,6,21,138,8,0,22,9,20,137,21,9,
  23,139,9,0,9,0,24,9,10,0,24,9,22,138,23,6,
  25,140,11,0,26,9,24,139,25,9,27,141,12,0,28,15,
  29,142,30,9,31,15,32,9,33,15,26,140,27,15,34,9,
  35,15,36,9,13,0,37,136,38,143,39,18,40,144,14,0,
  41,143,42,16,43,145,44,146,14,0,45,145,46,9,47,147,
  48,18,14,0,49,146,50,147,51,16,52,144,14,0,52,15,
  37,148,40,18,49,149,14,0,38,7,42,150,41,18,39,148,
  14,0,43,7,53,151,54,7,46,152,45,18,44,150,14,0,
  50,18,48,152,47,15,55,153,56,15,51,149,14,0,49,18,
  41,150,44,18,50,149,14,0,16,16,38,148,37,16,17,135,
  15,0,53,6,57,154,58,6,54,155,16,0,59,6,56,147,
  55,6,60,156,9,0,61,15,59,153,60,15,62,157,17,0,
  63,14,61,156,62,14,64,7,65,14,66,158,67,14,68,7,
  18,0,4,6,69,159,70,1,5,132,9,0,69,6,9,0,
  9,0,9,0,19,0,69,9,71,160,72,1,73,9,70,161,
  9,0,71,1,20,0,74,162,75,15,72,159,71,1,20,0,
  76,17,77,1,75,160,74,1,21,0,78,15,67,157,66,15,
  79,163,22,0,80,6,78,158,79,6,81,18,23,0,82,15,
  83,164,84,9,85,1,86,142,87,1,88,1,89,1,90,9,
  24,0,29,1,87,165,86,1,30,141,9,0,83,1,91,166,
  92,1,84,165,9,0,91,1,9,0,91,6,93,16,94,6,
  92,164,25,0,57,17,95,167,96,17,58,168,26,0,95,17,
  97,169,98,17,96,170,27,0,97,17,99,7,100,17,98,167,
  // sector_defs 112
  -86,156,0,3,-96,144,0,9,-126,128,0,9,-96,116,2,2,
  -96,112,0,1,-96,104,0,1,-84,180,0,1,-68,196,0,1,
  -20,212,0,1,-96,96,0,1,-96,244,0,1,-96,272,0,9,
  80,308,0,6,-96,96,8,12,-96,96,0,12,-184,172,2,2,
  -88,84,0,1,-96,96,0,0,-48,84,3,3,-76,108,0,2,
  -96,96,0,2,-96,96,15,15,-96,96,9,9,-96,204,0,6,
  68,260,0,1,-96,148,6,9,-124,128,6,9,-152,100,6,9,
  // line_defs 172
  1,0,3,4,28,0,15,15,6,0,3,4,2,0,3,4,
  0,0,3,4,3,0,6,6,4,0,3,4,5,0,3,4,
  23,0,3,4,7,0,3,4,8,0,3,4,11,0,3,4,
  12,0,3,4,13,0,3,4,40,0,3,4,19,0,3,4,
  18,0,3,4,20,0,3,4,22,0,3,4,21,0,3,4,
  14,0,3,4,17,0,3,4,15,0,3,4,24,0,7,7,
  16,0,3,4,25,0,3,4,44,0,7,4,20,0,3,6,
  26,0,3,4,27,0,3,4,37,0,3,4,33,0,3,4,
  35,0,3,4,28,0,3,9,36,0,3,4,38,0,3,4,
  41,0,3,4,39,0,3,4,43,0,3,4,45,0,3,4,
  24,0,3,4,46,0,3,4,44,0,3,4,
};

const uint8_t skull[1024 + 2] = { // 32x32
5,5,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x0,
0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x1,0x1,0x1,
0x1,0x1,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x1,0x1,
0x1,0x1,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x1,0x1,
0x1,0x1,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x1,0x1,
0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,
0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x0,0x0,
0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x3,
0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,
0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,
0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,
0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,
0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,
0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,
0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,
0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,
0x1,0x1,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x2,
0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x3,
0x3,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
};

const uint8_t wall3[] = {
5,6,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x0,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x0,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x0,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,0x0,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
};

const uint8_t wall4[2048 + 2] = { // 16x128
4,7,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

};

const uint8_t wall6[] = {
5,5,
0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x2,
0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x2,0x0,
0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x2,0x0,0x0,
0x3,0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x3,0x3,0x3,
0x3,0x3,0x3,0x1,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x2,0x0,0x0,0x0,
0x3,0x3,0x3,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,
0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,
0x3,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,
0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,
0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,
};

const uint8_t eye[] = {
5,5,
0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x3,0x1,0x1,0x1,0x1,0x3,0x1,0x0,0x0,
0x3,0x3,0x3,0x1,0x3,0x3,0x1,0x1,0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x3,
0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x3,0x1,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x3,0x3,0x1,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,
0x1,0x3,0x3,0x3,0x3,0x1,0x1,0x3,0x3,0x1,0x1,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x1,0x1,0x0,0x0,0x0,0x0,0x0,
0x0,0x1,0x3,0x3,0x3,0x1,0x3,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x1,
0x1,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x1,0x1,0x3,0x0,0x0,0x0,
0x3,0x0,0x0,0x1,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x1,0x1,0x3,0x1,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x1,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x1,0x3,0x3,0x1,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,
0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x3,0x1,0x1,0x1,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x1,0x0,0x0,0x0,0x1,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x1,0x0,0x0,0x0,0x1,0x3,0x1,0x3,0x1,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x0,0x0,0x0,
0x0,0x0,0x0,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x3,0x3,0x1,0x1,0x1,0x3,0x3,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x3,0x3,
0x3,0x3,0x1,0x3,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x3,0x0,0x0,0x1,0x0,0x0,0x0,0x3,0x3,
0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x3,0x1,0x0,0x0,0x0,0x3,
0x1,0x3,0x1,0x1,0x1,0x1,0x1,0x0,0x3,0x0,0x0,0x1,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x1,0x1,0x3,0x3,0x1,0x0,0x1,0x3,0x1,0x0,0x0,0x1,
0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x1,0x1,0x1,0x1,0x1,0x3,0x0,0x1,0x3,0x3,0x1,0x0,0x0,
0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x1,0x1,0x3,0x3,0x1,0x3,0x3,0x0,0x1,0x3,0x3,0x3,0x3,0x1,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x1,
0x3,0x3,0x1,0x1,0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x3,0x1,
0x1,0x1,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x3,0x3,0x3,0x3,0x0,0x0,0x0,
0x3,0x3,0x3,0x3,0x3,0x3,0x1,0x0,0x1,0x3,0x3,0x3,0x3,0x1,0x1,0x1,
0x1,0x1,0x1,0x3,0x3,0x3,0x1,0x0,0x1,0x3,0x1,0x1,0x1,0x0,0x0,0x0,
0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};


inline int clamp(int x, int a, int b)
{
    if (x < a) return a;
    if (x > b) return b;
    return x;
}

class PortalRender
{
    typedef struct {
        int16_t x,y;
    } vertex;

    typedef struct {
        int16_t far_seg,flags,top_color,bottom_color;
    } line_def;

    typedef struct {
        int16_t roof,floor,roof_color,floor_color;
    } sector_def;

    int width;
    int height;
    int HSCALE;
    int VSCALE;

    float player_x = 0;
    float player_y = 0;
    float p_cos,p_sin;
    int player_head;
    int player_eye;

    int player_angle = 0;
    int player_sector = 0;
    int player_velocity = 0;
    int player_angular_velocity = 0;
    const sector_def* player_def = 0;

    // from data
    const vertex* _vertexes = 0;
    const int16_t* _segs;
    const int16_t* _segs_ptr;
    const line_def* _line_defs;
    const sector_def* _sector_defs;

    int _seg_pos;
    int _seg_ptr;
    int _seg_len;
    int _seg_flags;

    float _x0,_y0;
    float _x1,_y1;
    float _tx1,_ty1;
    int _c0,_c1;

    int _stack = 0;
    int _sector[16];
    int _left[16];
    int _right[16];
    int _clip_left,_clip_right;
    int _wireframe = 1;

    int _lines;
    int _frames = 0;

    uint8_t tops[96];
    uint8_t bottoms[96];

//#define RGBTEST

public:
    PortalRender(int wire = 1)
    {
        _wireframe = wire ^ 1;
        toggle_wireframe();
    }

    void load(const int16_t* data)
    {
        const int16_t* p;
        int n = data[0];
        p = data + 1 + n;   // start of data

        // const int16_t* _hdr = p;
        p += data[1];
        _vertexes = (vertex*)p;
        p += data[2];
        _segs_ptr = p;
        p += data[3];
        _segs = p;
        p += data[4];
        _sector_defs = (sector_def*)p;
        p += data[5];
        _line_defs = (line_def*)p;
    }

    const sector_def* get_sector_def_(int s)
    {
        int i = _segs_ptr[s] << 1;          // point to segment data, length is *2 because _segs is in pairs
        return _sector_defs + _segs[i];     // may be temp if animated
    }

    const sector_def* get_sector_def(int s)
    {
        auto sd = get_sector_def_(s);
        if (s == 3 || s == 24 || s == 26) {
            float f = _frames & 0xFF;
            int i = (sin(2*3.1415*f/256)+1)*96/2;
            static sector_def d = *sd;
            d.roof = -i;
            d.floor = i;
            return &d;
        }
        return sd;
    }

    const line_def* get_line_def(int c)
    {
        return _line_defs + (c-0x80);   // get linedef, may be temp if animated
    }

    uint8_t rbuf[4*192];
    uint8_t gbuf[4*192];
    uint8_t *fb = 0;

    void set_pix(int x, int y)
    {
        if (x <= 0)
            return;
        uint8_t* b = fb + 4 + y*12 + (x >> 3);
        *b |= 0x80 >> (x & 7);
    }

    int pin(int n)
    {
        if (n < 0) return 0;
        if (n > 0xFF) return 0xFF;
        return n;
    }
    uint8_t buf[32*192];

    uint8_t _pp[4] = {0, 6, 9, 15};
    const uint8_t* _texts[4] = {wall6,eye,skull,wall4};

    uint8_t text(uint8_t u, uint8_t v, uint8_t i)
    {
        const uint8_t* t = _texts[i];
        u >>= 8-t[0];
        v >>= 8-t[1];
        return _pp[t[2 + ((v << t[0]) | u)]];
        //return ((u ^ v) & 0x40) ? 0x6 : 0x9;
    }

    Texture _tx;

    // draw a col
    enum {
        ROOF,
        FLOOR,
        TOP_WALL,
        MID_WALL,
        BOTTOM_WALL,
    };

    void test_card()
    {
        for (int x = 0; x < 32; x++) {
            int d = (x >> 3);
            uint8_t m = 0x80 >> (x & 7);
            for (int y = 0; y < 192; y++) {
                int c = (x >> 3);
                c |= (y/48) << 2;
                if (y & 1) {
                    // odd line
                    rbuf[d] = (c & 0x8) ? (rbuf[d] | m) : (rbuf[d] &= ~m);
                    gbuf[d] = (c & 0x4) ? (gbuf[d] | m) : (gbuf[d] &= ~m);
                } else {
                    // even line
                    rbuf[d] = (c & 0x1) ? (rbuf[d] | m) : (rbuf[d] &= ~m);
                    gbuf[d] = (c & 0x2) ? (gbuf[d] | m) : (gbuf[d] &= ~m);
                }
                d += 4;
            }
        }
    }

    void col(int x, int t, int b, int color, int edge = 0, int kind = MID_WALL)
    {
        if (_wireframe) {
            if (t == b)
                return;
            if (edge) {
                while (t < b)
                    set_pix(x,t++);
            } else {
                if (t != 0)
                    set_pix(x,t);
                if (b < (height-1))
                    set_pix(x,b);
            }
        } else {
            #ifdef RGBTEST
            vline_(x,t,b,color,_tx);
            return;
            #endif
/*
 //    bitmaps from RGGR pattern, multiple phases of dark green. red
 // RGGR masks
 enum {
     BLACK = 0,
     DK_GREEN = 1,
     DK_RED = 2,
     DK_YELLOW = 3,
     RED = 6,
     RED_YELLOW = 7,
     GREEN = 9,
     GREEN_YELLOW = 11,
     DK_YELLOW2 = 12,
     YELLOW = 15,
     BLUE = 16,
 };
 */
            uint8_t m = 0x80 >> (x & 7);
            int d = t*4 + (x >> 3);
            uint8_t u = _tx.uz;
            int c = kind > FLOOR ? 0 : color;
            while (t < b) {
                if (kind > FLOOR) {
                    if (t == b-1) {
                        c = 0;
                    } else
                        if (color >= 16)
                            c = text(u,_tx.v,color-16);
                }
                if (t & 1) {
                    // odd line
                    rbuf[d] = (c & 0x8) ? (rbuf[d] | m) : (rbuf[d] &= ~m);
                    gbuf[d] = (c & 0x4) ? (gbuf[d] | m) : (gbuf[d] &= ~m);
                } else {
                    // even line
                    rbuf[d] = (c & 0x1) ? (rbuf[d] | m) : (rbuf[d] &= ~m);
                    gbuf[d] = (c & 0x2) ? (gbuf[d] | m) : (gbuf[d] &= ~m);
                }
                t++;
                _tx.v += _tx.vstep;
                d += 4;
                c = color;
            }
        }
    }

    int set_sector(int n, bool no_xform = false)
    {
        _seg_ptr = _segs_ptr[n];
        int i = _seg_ptr++ << 1;
        // _segs[i+0] is sector_def index
        _seg_flags = _segs[i+1];
        _seg_len = _segs_ptr[n+1]-_seg_ptr;
        _seg_pos = 0;
        player_def = get_sector_def(n);
        next_point(no_xform);
        return 1;
    }

    // load the next point into _x1,_y1,_c1
    void next_point(bool no_xform = false)
    {
        if (_seg_pos == _seg_len) {
            _seg_pos = 0;                    // loop
            _seg_len = 0;                    // producing the last point
        }
        int s = (_seg_ptr + _seg_pos)<<1;
        auto& v = _vertexes[_segs[s]];
        _c1 = _segs[s+1];                    // color/portal segment
        _seg_pos++;

        float x = v.x - player_x;
        float y = v.y - player_y;
        if (no_xform) {
            _x1 = x;
            _y1 = y;
            return;
        }
        _x1 = x*p_cos - y*p_sin;
        _y1 = x*p_sin + y*p_cos;
    }

    // clip line against y=yn
    float _u0;
    float _u1;
    void clipper(float yn)
    {
        float dy = 1/(_y1-_y0);
        float m = (_x1-_x0)*dy;
        if (_y0 < _y1)
        {
            _u0 += (yn-_y0)*dy;
            _x0 += (yn-_y0)*m;
            _y0 = yn;
        } else {
            _u1 += (yn-_y1)*dy;
            _tx1 += (yn-_y1)*m;
            _ty1 = yn;
        }
    }

    void draw_sector(int depth)
    {
        _clip_left = _left[depth];
        _clip_right = _right[depth];
        if (_clip_left >= _clip_right)
            return;

        int s = _sector[depth];
        set_sector(s);
        int w = -1;
        while (_seg_len)
        {
            _c0 = _c1;
            _x0 = _x1;
            _y0 = _y1;
            next_point();
            w++;

            if (_y0 <= 0 && _y1 <= 0)                // behind us
                continue;

            const line_def* ld = _c0 < 0x80 ? 0 : get_line_def(_c0);

            _tx1 = _x1;
            _ty1 = _y1;
            float n = 0.001;
            _u0 = 0;
            _u1 = 1;
            if (_y0 <= n || _y1 <= n)
                clipper(n);        // clip to y to frustrum

            float pz0,px0,pz1,px1;
            pz0 = HSCALE/_y0;
            px0 = width/2 + _x0 * pz0 * VSCALE;
            if (px0 >= _clip_right)
                continue;                            // not visible

            pz1 = HSCALE/_ty1;
            px1 = width/2 + _tx1 * pz1 * VSCALE;
            if (px0 >= px1 || px1 <= _clip_left)
                continue;                            // not visible

            _u0 *= 256;
            _u1 *= 256;
            float dx = px1-px0;
            _tx.u = _u0*pz0;                        // normally zero
            float u1 = _u1*pz1;                     // 256 relative to original dy
            _tx.ustep = (u1-_tx.u)/dx;

            float zstep = (pz1-pz0)/dx;             // wall z
            if (px0 < _clip_left) {
                _tx.u += (_clip_left-px0)*_tx.ustep;      // texture
                pz0 += (_clip_left-px0)*zstep;
                px0 = _clip_left;
            }
            if (px1 > _clip_right)
                px1 = _clip_right;

            int ix0 = px0;
            int ix1 = px1;
            if (ix1 <= ix0)
                continue;

            const sector_def* p = ld ? get_sector_def(ld->far_seg): 0;
            const sector_def* d = player_def;

            // roofs are -ve
            // floors are +ve

            float r0,f0,r1,f1;
            float r0_step,f0_step,r1_step,f1_step;

            int yaw = player_head*VSCALE;
            int eye = player_eye;
            r0 = yaw + pz0*(d->roof+eye);
            f0 = yaw + pz0*(d->floor+eye);
            r0_step = zstep*(d->roof+eye);
            f0_step = zstep*(d->floor+eye);

            if (p) {    // visible segment on other side
                r1 = yaw + pz0*(p->roof+eye);
                f1 = yaw + pz0*(p->floor+eye);
                r1_step = zstep*(p->roof+eye);
                f1_step = zstep*(p->floor+eye);
            } else {
                r1 = f1 = r1_step = f1_step = 0;    // make warning happy
            }

            int x = ix0;
            while (x < ix1) {
              //  bool edge = (x==ix0 || (x==ix1-1));
                bool edge = x==ix0;
                _tx.uz = 0;
                _tx.v = 0;
                _tx.z = pz0;
                _tx.vstep = 0;

                int t = tops[x];
                int b = bottoms[x];
                int r0i = clamp(r0,t,b);
                int f0i = clamp(f0,t,b);

                col(x,t,r0i,d->roof_color,0,ROOF);             // roof
                col(x,f0i,b,d->floor_color,0,FLOOR);            // floor

                if (!p) {
                    _tx.uz = _tx.u/pz0;                     // TODO: only texture walls at the moment
                    _tx.vstep = (float)0x100/(f0-r0);       // scale to height (fixed table)
                    if (r0i > r0)
                        _tx.v = _tx.vstep*(r0i-r0);

                    col(x,r0i,f0i,_c0,edge,MID_WALL);      // simple wall
                } else {
                    if (_wireframe && edge)
                        col(x,r0i,f0i,_c0,edge);

                    int r1i = clamp(r1,t,b);
                    int f1i = clamp(f1,t,b);
                    r1 += r1_step;
                    f1 += f1_step;

                    if (r1i > r0i) {                   // pediment visible?
                        col(x,r0i,r1i,ld->top_color,edge,TOP_WALL);
                        t = clamp(r1i,t,height-1);
                    } else
                        t = clamp(r0i,t,height-1);

                    if (f1i < f0i) {                    // step visible?
                        col(x,f1i,f0i,ld->bottom_color,edge,BOTTOM_WALL);
                        b = clamp(f1i,0,b);
                    } else
                        b = clamp(f0i,0,b);

                    tops[x] = t;
                    bottoms[x] = b;
                }
                r0 += r0_step;
                f0 += f0_step;

                pz0 += zstep;                   // for textures
                _tx.u += _tx.ustep;             //
                x++;
            }
            _lines++;

            if (ld && p->roof < p->floor) {    // visible portal
                _sector[_stack] = ld->far_seg;
                _left[_stack] = ix0;
                _right[_stack] = ix1;
                _stack++;
            }
        }
    }

    void render_sectors()
    {
        _stack = 0;
        _sector[0] = player_sector;
        _left[0] = 0;
        _right[0] = width;
        do {
            draw_sector(_stack);        // may put things on stack
        } while (_stack--);
    }

    #define RADIUS 2
    float overlap(float a1, float b0, float b1)
    {
        float dilate = RADIUS;
        if (b0 > b1) {
            float t = b0;
            b0 = b1;
            b1 = t;
        }
        b0 -= dilate;
        b1 += dilate;
        return a1 >= b0 && a1 <= b1;
    }

    float sq(float a, float b)
    {
        return a*a + b*b;
    }

    // shoves player away from walls
    // should not get called very often
    int collide(float& px, float& py)
    {
        float A = px - _x0;
        float B = py - _y0;
        float C = _x1 - _x0;        // 0 if vertical
        float D = _y1 - _y0;        // 0 if horzontal

        float dot = A * C + B * D;
        float len2 = sq(C,D);
        float x,y;
        if (dot > 0) {
            if (dot > len2) {
                x = _x1;            // this end point is closest
                y = _y1;
            } else {
                float m = dot / len2;
                x = _x0 + m * C;    // perpendicular point on the line
                y = _y0 + m * D;
            }
        } else {
            x = _x0;                // this end point is closest
            y = _y0;
        }
        float dist2 = sq(px - x,py - y);
        if (dist2 >= RADIUS*RADIUS)
            return 0;

        // Should only ever get here while pushing sloped lines or corners
        float m = (RADIUS-sqrt(dist2))/sqrt(len2);
        px += D*m;
        py -= C*m;
        return 1;
    }

    void move()
    {
        int k = joy_map();
        if (k & GENERIC_UP)
            if (player_velocity < 16) player_velocity += 2;
        if (k & GENERIC_DOWN)
            if (player_velocity > -16) player_velocity -= 2;
        if (k & GENERIC_RIGHT)
            if (player_angular_velocity < 16) player_angular_velocity += 2;
        if (k & GENERIC_LEFT)
            if (player_angular_velocity > -16) player_angular_velocity -= 2;

        player_angle += (float)player_angular_velocity/2;
        player_angular_velocity = player_angular_velocity*3/4;

        // velocity
        float v = (float)player_velocity/4;
        player_velocity = player_velocity*3/4;

        // angle
        float a = (float)player_angle/256*3.141596535*2;
        p_sin = sin(a);
        p_cos = cos(a);

        // proposed player delta
        float x = p_sin*v;
        float y = p_cos*v;

        const line_def* crossed = 0;
        set_sector(player_sector,true);
        while (_seg_len)
        {
            _c0 = _c1;
            _x0 = _x1;
            _y0 = _y1;
            next_point(true);            // next point

            if (!overlap(x,_x0,_x1))     // cartesian tests to see if line crossing/collision possilbe
                continue;
            if (!overlap(y,_y0,_y1))
                continue;

            if (_c0 >= 0x80) {
                auto* ld = get_line_def(_c0);
                float d = (x-_x0)*(_y1-_y0) - (y-_y0)*(_x1-_x0);
                if (d < 0)
                    crossed = ld;
                continue;
            }
            collide(x,y);
        }

        // did we cross into a new segment?
        if (crossed) {
            //printf("moved %d->%d\n",player_sector,ld->far_seg);
            player_sector = crossed->far_seg;
        }
        player_x += x;
        player_y += y;

        float bob = player_velocity*sin(_frames++/2)*player_velocity/2;
        player_eye = 96 - get_sector_def(player_sector)->floor + bob;
        player_head = height/2/VSCALE + 0;  // looking up or down...
    }

public:
    void render()
    {
        if (!_vertexes)
            load(level);
        move();

        if (_wireframe) {
            fb = display_backbuffer();
            memset(fb,0,4+12*99);
            fb[0] = 0x0E;
            fb[1] = 0xC0;
        }

        memset(tops,0,width);
        memset(bottoms,height-1,width);
        _lines = 0;

        render_sectors();
        //test_card();
        //if (_lines == 0)
        //    printf("failed in %d\n",player_sector);

        #ifndef RGBTEST
        if (!_wireframe) {
            //dither8rg(&buf[0],rbuf,gbuf,32,192);
            //dither8rg_noise(&buf[0],rbuf,gbuf,32,192);
            display_32x96(rbuf,gbuf,0x36,0xC4); // 0x30 Red, 0xC4 green
        }
        else
            display_swap();
        #endif

        usleep(33333);
    }

    void toggle_wireframe()
    {
        _wireframe ^= 1;
        if (_wireframe) {
            width = height = 96;
            HSCALE = 6;
            VSCALE = 12;
            display_mode(Graphics96x96);
        } else {
            width = 32;
            height = 192;
            HSCALE = 12;
            VSCALE = 2;
    #ifndef RGBTEST
            display_mode(Playfield32x192);
    #else
            display_mode(0);
    #endif
        }
    }
};

extern int _gk;
void gk(int n)
{
    _gk += n;
    printf("gk: %d\n",_gk);
}

int doomed_main(int argc, const char * argv[])
{
    PortalRender* r = new PortalRender(0);
    audio_play(FS_URL("mid/e1m1.mid.zip"));
    for (;;) {
        r->render();
        char c = get_key();
        if (c == '1')
            gk(1);
        else if (c == '2')
            gk(-1);
        else if (c == 'w')
            r->toggle_wireframe();
        else if (c)
            break;
    }
    delete r;
    return 0;
}


