//
//  retro_vox.cpp
//  by rossum
//
//  Derived from the amazing Intellivoice Emulation
//  by J. Zbiciak

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#include "retro_vox.h"

// SP0250/SP0256 emulation

const char* _retro_phonemes[] = {
    "PA1",  // 0 PAUSE
    "PA2",  // 1 PAUSE
    "PA3",  // 2 PAUSE
    "PA4",  // 3 PAUSE
    "PA5",  // 4 PAUSE
    "OY",  // 5 Boy
    "AY",  // 6 Sky
    "EH",  // 7 End
    "KK3",  // 8 Comb
    "PP",  // 9 Pow
    "JH",  // 10 Dodge
    "NN1",  // 11 Thin
    "IH",  // 12 Sit
    "TT2",  // 13 To
    "RR1",  // 14 Rural
    "AX",  // 15 Succeed
    "MM",  // 16 Milk
    "TT1",  // 17 Part
    "DH1",  // 18 They
    "IY",  // 19 See
    "EY",  // 20 Beige
    "DD1",  // 21 Could
    "UW1",  // 22 To
    "AO",  // 23 Aught
    "AA",  // 24 Hot
    "YY2",  // 25 Yes
    "AE",  // 26 Hat
    "HH1",  // 27 He
    "BB1",  // 28 Business
    "TH",  // 29 Thin
    "UH",  // 30 Book
    "UW2",  // 31 Food
    "AW",  // 32 Out
    "DD2",  // 33 Do
    "GG3",  // 34 Wig
    "VV",  // 35 Vest
    "GG1",  // 36 Got
    "SH",  // 37 Ship
    "ZH",  // 38 Azure
    "RR2",  // 39 Brain
    "FF",  // 40 Food
    "KK2",  // 41 Sky
    "KK1",  // 42 Cant
    "ZZ",  // 43 Zoo
    "NG",  // 44 Anchor
    "LL",  // 45 Lake
    "WW",  // 46 Wool
    "XR",  // 47 Repair
    "WH",  // 48 Whig
    "YY1",  // 49 Yes
    "CH",  // 50 Church
    "ER1",  // 51 Letter
    "ER2",  // 52 Fir
    "OW",  // 53 Beau
    "DH2",  // 54 Bath
    "SS",  // 55 Vest
    "NN2",  // 56 No
    "HH2",  // 57 Hoe
    "OR",  // 58 Store
    "AR",  // 59 Alarm
    "YR",  // 60 Clear
    "GG2",  // 61 Guest
    "EL",  // 62 Saddle
    "BB2",  // 63 Business
};

const uint8_t PA1_SP0[] = {
0x82, // silence
0x00};

const uint8_t PA2_SP0[] = {
0x85, // silence
0x00};

const uint8_t PA3_SP0[] = {
0x88, // silence
0x00};

const uint8_t PA4_SP0[] = {
0x90, // silence
0x00};

const uint8_t PA5_SP0[] = {
0xA0, // silence
0x00};

const uint8_t OY_SP0[] = {
0x04,0xFE,0x94,0x5B,0x60,0xA0,0x60,0xB8,0x60,0xF8,0x60,0x40,0x60,0x24, // voiced
0x04,0x90,0x78,0x60,0xB0, // voiced
0x02,0x90,0x54,0x60,0xA8, // voiced
0x04,0x90,0x70,0x60,0xB0, // voiced
0x02,0x80,0x5C, // voiced
0x05,0x90,0x74,0x60,0xB8, // voiced
0x03,0xB0,0x9C,0x60,0xA8,0x60,0xC0, // voiced
0x05,0x90,0xB4,0x60,0xD0, // voiced
0x03,0x10,0x60,0xE0, // voiced
0x0A,0xB0,0x90,0x60,0xA0,0x60,0xE8, // voiced
0x00};

const uint8_t AY_SP0[] = {
0x02,0xFE,0xB8,0x5B,0x70,0xB0,0x70,0xC8,0x60,0xF8,0x50,0x18,0x44,0x3C, // voiced
0x02,0xB0,0xB4,0x70,0xC8,0x70,0xB0, // voiced
0x03,0x80,0xB8, // voiced
0x03,0xB0,0xB4,0x70,0xB0,0x70,0xC8, // voiced
0x03,0xB8,0xB0,0x70,0xC8,0x70,0xF8,0x60,0xB8, // voiced
0x03,0xB8,0xB4,0x70,0xB0,0x70,0xD0,0x60,0xF8, // voiced
0x04,0x98,0xBC,0x70,0xF8,0x60,0xE0, // voiced
0x02,0xB8,0xB8,0x70,0xA8,0x70,0xE0,0x60,0xF8, // voiced
0x04,0xB8,0xB4,0x70,0xA0,0x70,0xE8,0x60,0x00, // voiced
0x03,0x90,0x90,0x70,0xF0, // voiced
0x00};

const uint8_t EH_SP0[] = {
0x07,0xFF,0xEC,0x5B,0x50,0x00,0x50,0x28,0x50,0x40,0x10,0xF8,0x58,0xE8,0x64,0xAA, // voiced
0x00};

const uint8_t KK3_SP0[] = {
0x85, // silence
0x44,0x87,0x34,0x40,0x38,0x04,0xFC,0x68,0xCB, // unvoiced
0x46,0x87,0x30,0x18,0x20,0x40,0x20,0x62,0xC5, // unvoiced
0x00};

const uint8_t PP_SP0[] = {
0x8E, // silence
0x45,0x87,0x14,0x40,0x28,0x2C,0xF4,0x3B,0xBF, // unvoiced
0x47,0x87,0x30,0x50,0x28,0x44,0xF8,0x3A,0xCF, // unvoiced
0x00};

const uint8_t JH_SP0[] = {
0x45,0x87,0x54,0x20,0x28,0x42,0x18,0x30,0xFA, // unvoiced
0x05,0xFF,0x9C,0x5B,0x60,0x18,0x50,0x30,0x20,0x38,0x10,0x00,0x60,0x00,0x38,0xE6, // voiced
0x05,0xBF,0x94,0x50,0x18,0x40,0x28,0x30,0x40,0x68,0xFC,0x52,0xE8,0x16,0xDD, // voiced
0x00};

const uint8_t NN1_SP0[] = {
0x08,0xFF,0x3C,0x5B,0x30,0x00,0x20,0x18,0x40,0x38,0x60,0xFC,0x2A,0xE0,0x54,0xA1, // voiced
0x04,0xBF,0x54,0x30,0x08,0x30,0x20,0x10,0x20,0x68,0xFC,0x1C,0xE8,0x50,0xA2, // voiced
0x0A,0x93,0x58,0x40,0x20,0x24,0xE0,0x5B,0x9B, // voiced
0x00};

const uint8_t IH_SP0[] = {
0x06,0xFF,0xEC,0x5B,0x50,0x00,0x20,0x10,0x50,0x30,0x60,0xE8,0x1E,0x34,0x6E,0xA0, // voiced
0x00};

const uint8_t TT2_SP0[] = {
0x86, // silence
0x44,0x87,0x74,0x28,0x34,0x4E,0x1C,0x21,0xF4, // unvoiced
0x45,0x87,0x54,0x20,0x30,0x44,0x1C,0x53,0xEA, // unvoiced
0x44,0x87,0x40,0x18,0x24,0x46,0x1C,0x5A,0xE7, // unvoiced
0x00};

const uint8_t RR1_SP0[] = {
0x06,0xFF,0x1C,0x5B,0x60,0x98,0x60,0xC0,0x50,0xE0,0x40,0x0C,0x3C,0x20,0x2B,0x32, // voiced
0x04,0x88,0x54,0x50,0xE8, // voiced
0x02,0x80,0x78, // voiced
0x03,0xA8,0xB4,0x60,0xA0,0x50,0xF0, // voiced
0x02,0x90,0x9C,0x60,0xB8, // voiced
0x03,0x80,0xB0, // voiced
0x00};

const uint8_t AX_SP0[] = {
0x07,0xFF,0xEC,0x5B,0x50,0xF0,0x20,0x18,0x60,0x28,0x60,0xD0,0x18,0x28,0x61,0xA8, // voiced
0x00};

const uint8_t MM_SP0[] = {
0x07,0xFE,0x74,0x5B,0x50,0xF0,0x30,0xC0,0x20,0xE0,0x10,0x00,0x44,0x20, // voiced
0x06,0x80,0x78, // voiced
0x06,0x98,0x7C,0x30,0xE0,0x20,0xC8, // voiced
0x05,0x80,0x94, // voiced
0x00};

const uint8_t TT1_SP0[] = {
0x87, // silence
0x42,0x87,0x50,0x48,0x40,0x40,0x10,0x3F,0xDF, // unvoiced
0x46,0x87,0x34,0x18,0x24,0x40,0x28,0x3F,0xE8, // unvoiced
0x00};

const uint8_t DH1_SP0[] = {
0x0D,0xFF,0x74,0x5B,0x30,0x08,0x30,0x18,0x40,0x38,0x30,0xEC,0x2E,0xD4,0x20,0xCB, // voiced
0x04,0xBF,0xB4,0x60,0x00,0x50,0x18,0x50,0x38,0x08,0xF4,0x5E,0xDC,0x5C,0xA1, // voiced
0x00};

const uint8_t IY_SP0[] = {
0x04,0xFF,0xEC,0x5B,0x00,0x08,0x40,0x28,0x40,0x38,0x60,0x04,0x66,0xF0,0x5A,0xA1, // voiced
0x04,0x3F,0x40,0x28,0x40,0x38,0x00,0x08,0x50,0x04,0x62,0xF4,0x57,0xA4, // voiced
0x03,0x3F,0x10,0x08,0x50,0x28,0x40,0x38,0x48,0x04,0x64,0xF4,0x62,0x9A, // voiced
0x04,0xA7,0xD8,0x20,0x08,0x38,0x04,0x60,0xF8,0x66,0x96, // voiced
0x05,0xAF,0xD0,0x30,0x08,0x50,0x38,0x20,0xFC,0x62,0xF8,0x6E,0x92, // voiced
0x05,0xBF,0x94,0x40,0x08,0x40,0x28,0x40,0x38,0x60,0xF8,0x0C,0xF4,0x71,0x90, // voiced
0x00};

const uint8_t EY_SP0[] = {
0x04,0xFE,0xB8,0x5B,0x70,0xA0,0x60,0xE8,0x20,0x00,0x30,0x04,0x52,0x28, // voiced
0x02,0x10,0x60,0xF0, // voiced
0x04,0x80,0xB4, // voiced
0x02,0xB8,0x9C,0x70,0x98,0x60,0xF8,0x20,0xF8, // voiced
0x06,0x08,0x20,0x00, // voiced
0x02,0x00, // voiced
0x07,0xA0,0x74,0x70,0x90, // voiced
0x03,0x88,0x5C,0x20,0xF8, // voiced
0x00};

const uint8_t DD1_SP0[] = {
0x04,0xFF,0xB4,0x5B,0x70,0x90,0x70,0xE0,0x60,0x00,0x10,0x10,0x56,0x1C,0x49,0x3A, // voiced
0x03,0xA0,0xB0,0x70,0x98, // voiced
0x00};

const uint8_t UW1_SP0[] = {
0x04,0xFF,0xD4,0x5B,0x60,0x98,0x60,0xF0,0x60,0xD8,0x58,0x1C,0x4E,0x24,0x2C,0x39, // voiced
0x03,0x28,0x60,0xD0,0x60,0xA0, // voiced
0x03,0xB0,0xD0,0x60,0xF0,0x60,0xC8, // voiced
0x00};

const uint8_t AO_SP0[] = {
0x09,0xFF,0xD0,0x5B,0x50,0x20,0x20,0x18,0x30,0x40,0x60,0xF8,0x60,0xC0,0x5A,0xB2, // voiced
0x00};

const uint8_t AA_SP0[] = {
0x04,0xFF,0xD4,0x5B,0x60,0xC8,0x60,0xB8,0x60,0xF8,0x28,0x14,0x36,0x1C,0x41,0x44, // voiced
0x03,0x00, // voiced
0x03,0x30,0x60,0xB8,0x60,0xC8, // voiced
0x00};

const uint8_t YY2_SP0[] = {
0x04,0xFF,0x9C,0x5B,0x50,0x10,0x40,0x28,0x30,0x30,0x30,0x08,0x64,0xF0,0x70,0x8E, // voiced
0x03,0x9F,0x98,0x50,0x28,0x30,0x38,0x28,0x04,0x5E,0xF4,0x76,0x8C, // voiced
0x05,0xBF,0xB4,0x30,0x08,0x40,0x28,0x20,0x30,0x40,0x08,0x5C,0xF4,0x70,0x90, // voiced
0x02,0xBF,0xD0,0x30,0x10,0x50,0x20,0x40,0x38,0x38,0x00,0x5A,0xF0,0x69,0x95, // voiced
0x04,0xBF,0xDC,0x40,0x20,0x40,0x28,0x10,0x18,0x48,0x00,0x60,0xF0,0x69,0x98, // voiced
0x02,0xAB,0xEC,0x30,0x18,0x10,0x20,0x5E,0xF0,0x68,0x9C, // voiced
0x00};

const uint8_t AE_SP0[] = {
0x0A,0xFF,0xB8,0x5B,0x40,0xF8,0x50,0x20,0x50,0x30,0x20,0xF0,0x4C,0xDC,0x66,0xAE, // voiced
0x00};

const uint8_t HH1_SP0[] = {
0x47,0x87,0x1C,0x28,0x24,0x4E,0x08,0x0C,0xEB, // unvoiced
0x47,0x87,0x50,0x38,0x34,0x3E,0x0C,0x1A,0xF1, // unvoiced
0x43,0x87,0x14,0x30,0x20,0xF2,0xE8,0x3F,0x03, // unvoiced
0x00};

const uint8_t BB1_SP0[] = {
0x04,0xFF,0x04,0x5B,0x30,0xF8,0x40,0x18,0x30,0x40,0x20,0xE4,0x04,0x18,0x76,0x88, // voiced
0x02,0xBF,0xB8,0x50,0x20,0x10,0x18,0x40,0x30,0x78,0xF8,0x74,0xE0,0x6C,0x98, // voiced
0x00};

const uint8_t TH_SP0[] = {
0x55,0x87,0x34,0x30,0x30,0x24,0x10,0x3B,0xE5, // unvoiced
0x00};

const uint8_t UH_SP0[] = {
0x09,0xFF,0xB4,0x5B,0x70,0xF8,0x50,0x20,0x50,0x28,0x68,0xC0,0x06,0x18,0x5E,0xA4, // voiced
0x00};

const uint8_t UW2_SP0[] = {
0x09,0xFF,0xB4,0x5B,0x60,0xF0,0x60,0x18,0x40,0x20,0x60,0xD8,0x0C,0x20,0x61,0x9D, // voiced
0x05,0xBF,0xB8,0x50,0x18,0x50,0x20,0x30,0x38,0x60,0xF0,0x66,0xD0,0x53,0xA6, // voiced
0x08,0xBB,0xB0,0x60,0x18,0x50,0x28,0x40,0x40,0x62,0xC8,0x61,0x9D, // voiced
0x00};

const uint8_t AW_SP0[] = {
0x09,0xFE,0x9C,0x5B,0x60,0xB8,0x60,0xD0,0x50,0xF8,0x20,0x0C,0x44,0x20, // voiced
0x06,0xB0,0x90,0x60,0xB0,0x60,0xC8, // voiced
0x05,0x90,0x74,0x60,0xC0, // voiced
0x05,0xA8,0x70,0x60,0xA8,0x50,0x00, // voiced
0x08,0xB0,0x34,0x60,0xA0,0x60,0xB8, // voiced
0x00};

const uint8_t DD2_SP0[] = {
0x85, // silence
0x44,0x87,0x3C,0x20,0x28,0x32,0x14,0x23,0xE7, // unvoiced
0x04,0xFF,0xD8,0x5B,0x50,0x18,0x50,0x20,0x30,0x40,0x60,0xF8,0x72,0xE4,0x5D,0x9D, // voiced
0x00};

const uint8_t GG3_SP0[] = {
0x89, // silence
0x46,0x87,0x3C,0x48,0x30,0x42,0xF4,0x2A,0xEA, // unvoiced
0x04,0xFF,0x94,0x5B,0x30,0x20,0x50,0x30,0x10,0x18,0x68,0xF8,0x58,0xE8,0x68,0x9C, // voiced
0x00};

const uint8_t VV_SP0[] = {
0x07,0xFF,0x30,0x5B,0x30,0x08,0x50,0x28,0x40,0x50,0x48,0xF0,0x68,0xC8,0x47,0xA8, // voiced
0x07,0xBF,0x7C,0x40,0x10,0x40,0x28,0x50,0x50,0x40,0xF0,0x1A,0xD0,0x3A,0xDE, // voiced
0x03,0xBF,0x94,0x60,0xF0,0x40,0x18,0x40,0x20,0x68,0xD0,0x18,0x2C,0x25,0xC7, // voiced
0x00};

const uint8_t GG1_SP0[] = {
0x85, // silence
0x44,0x87,0x30,0x30,0x14,0xF0,0xFC,0x41,0xFB, // unvoiced
0x04,0xFF,0xBC,0x5B,0x40,0x10,0x60,0x20,0x30,0x38,0x30,0xF8,0x5E,0xF4,0x5C,0xA1, // voiced
0x00};

const uint8_t SH_SP0[] = {
0x47,0x87,0x10,0x50,0x1C,0x0E,0x0C,0x5C,0xFB, // unvoiced
0x44,0x87,0x58,0x18,0x24,0x42,0x18,0x56,0xFA, // unvoiced
0x53,0x87,0x6C,0x18,0x20,0x4A,0x18,0x5B,0xFC, // unvoiced
0x45,0x87,0x54,0x18,0x24,0x2E,0x10,0x4C,0xF8, // unvoiced
0x00};

const uint8_t ZH_SP0[] = {
0x08,0xFE,0x94,0x5B,0x30,0xC0,0x40,0xE0,0x60,0xF8,0x58,0x14,0x48,0x24, // voiced
0x4C,0xFF,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x20,0x3F,0xFE, // unvoiced
0x00};

const uint8_t RR2_SP0[] = {
0x03,0xFF,0x3C,0x5B,0x40,0x08,0x30,0x20,0x30,0x38,0x48,0xDC,0x58,0xBC,0x54,0xA4, // voiced
0x04,0xBF,0x58,0x60,0xD0,0x70,0x10,0x30,0x20,0x60,0xBC,0x08,0x1C,0x5D,0xA1, // voiced
0x05,0xBB,0x74,0x50,0xD0,0x60,0x10,0x50,0x18,0x0E,0x20,0x5C,0xA3, // voiced
0x00};

const uint8_t FF_SP0[] = {
0x52,0x87,0x3C,0x38,0x28,0x28,0x04,0x27,0xE3, // unvoiced
0x00};

const uint8_t KK2_SP0[] = {
0x93, // silence
0x42,0x87,0x3C,0x30,0x34,0x12,0x04,0x56,0xDE, // unvoiced
0x43,0x87,0x50,0x28,0x2C,0x1E,0xF4,0x49,0xDC, // unvoiced
0x00};

const uint8_t KK1_SP0[] = {
0x88, // silence
0x42,0x87,0x74,0x38,0x30,0x62,0x0C,0x37,0xE2, // unvoiced
0x42,0x87,0x1C,0x20,0x2C,0x36,0x10,0x44,0xF9, // unvoiced
0x4A,0x87,0x54,0x28,0x2C,0x44,0x0C,0x1B,0xE7, // unvoiced
0x00};

const uint8_t ZZ_SP0[] = {
0x07,0xFF,0xD0,0x5B,0x50,0x20,0x60,0x40,0x50,0x58,0x58,0x00,0x54,0xDC,0x4D,0xA7, // voiced
0x4A,0xFF,0x58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x44,0x00,0xEC,0x30,0x21, // unvoiced
0x05,0xFF,0xD4,0x5B,0x50,0x20,0x50,0x40,0x40,0x48,0x40,0x00,0x60,0xDC,0x37,0xB9, // voiced
0x00};

const uint8_t NG_SP0[] = {
0x06,0xFF,0xBC,0x5B,0x40,0xD8,0x40,0xB8,0x40,0xF8,0x58,0x04,0x3C,0x2C,0x5A,0x55, // voiced
0x04,0xB8,0xB0,0x40,0xF0,0x40,0xB0,0x40,0xD8, // voiced
0x07,0xB0,0x9C,0x40,0xB0,0x40,0xF0, // voiced
0x09,0xB8,0x94,0x40,0xF0,0x40,0xB0,0x40,0xD0, // voiced
0x00};

const uint8_t LL_SP0[] = {
0x04,0xFF,0x78,0x5B,0x60,0x98,0x60,0xC8,0x40,0x08,0x30,0x18,0x44,0x28,0x25,0x2E, // voiced
0x04,0xA0,0xB4,0x60,0xA0, // voiced
0x04,0x98,0xB0,0x60,0xC0,0x40,0x00, // voiced
0x00};

const uint8_t WW_SP0[] = {
0x06,0xFF,0x34,0x5B,0x20,0xF8,0x40,0x18,0x30,0x28,0x38,0xC0,0xF8,0x10,0x5A,0xA0, // voiced
0x06,0xBF,0x3C,0x30,0x08,0x60,0x20,0x40,0x38,0x08,0xFC,0x50,0xB0,0x5F,0x9E, // voiced
0x07,0xBF,0x54,0x50,0x00,0x60,0x18,0x50,0x20,0x70,0xA8,0x02,0x14,0x72,0x93, // voiced
0x00};

const uint8_t XR_SP0[] = {
0x04,0xFF,0xB4,0x5B,0x60,0xA0,0x60,0xE8,0x60,0xF8,0x10,0x00,0x52,0x1C,0x59,0x42, // voiced
0x03,0x00, // voiced
0x03,0x88,0x9C,0x60,0xF0, // voiced
0x03,0x90,0xB4,0x60,0xE0, // voiced
0x03,0xA0,0xB8,0x60,0xA8, // voiced
0x03,0x98,0xB4,0x60,0xD8,0x60,0xE8, // voiced
0x04,0x80,0xB0, // voiced
0x02,0x80,0x9C, // voiced
0x04,0x98,0x7C,0x60,0xD0,0x60,0xE0, // voiced
0x02,0xA0,0x70,0x60,0xA0, // voiced
0x03,0xA8,0x78,0x60,0xA8,0x60,0xE8, // voiced
0x02,0x80,0x5C, // voiced
0x04,0x90,0x54,0x60,0xD8, // voiced
0x00};

const uint8_t WH_SP0[] = {
0x47,0x87,0x0C,0x20,0x20,0x1C,0xFC,0x28,0xD2, // unvoiced
0x4C,0x07,0x38,0x24,0x18,0x04,0x55,0xB4, // unvoiced
0x03,0xFF,0x78,0x5B,0x40,0xF8,0x70,0x30,0x20,0x20,0x38,0xC4,0xFC,0x10,0x5D,0xA3, // voiced
0x03,0xBF,0x94,0x60,0xF8,0x50,0x28,0x50,0x28,0x68,0xB0,0x06,0x1C,0x58,0xA3, // voiced
0x00};

const uint8_t YY1_SP0[] = {
0x04,0xFF,0x9C,0x5B,0x50,0x10,0x40,0x28,0x30,0x30,0x30,0x08,0x64,0xF0,0x70,0x8E, // voiced
0x03,0x9F,0x98,0x50,0x28,0x30,0x38,0x28,0x04,0x5E,0xF4,0x76,0x8C, // voiced
0x05,0xBF,0xB4,0x30,0x08,0x40,0x28,0x20,0x30,0x40,0x08,0x5C,0xF4,0x70,0x90, // voiced
0x02,0xBF,0xD0,0x30,0x10,0x50,0x20,0x40,0x38,0x38,0x00,0x5A,0xF0,0x69,0x95, // voiced
0x00};

const uint8_t CH_SP0[] = {
0x86, // silence
0x46,0x87,0x14,0x40,0x28,0x4E,0x08,0x19,0xE4, // unvoiced
0x4E,0x87,0x54,0x50,0x34,0x66,0x10,0x49,0xF6, // unvoiced
0x00};

const uint8_t ER1_SP0[] = {
0x02,0xFF,0xB4,0x5B,0x40,0x18,0x40,0x20,0x20,0x30,0x60,0xE4,0x68,0xCC,0x5F,0xA5, // voiced
0x03,0x0E,0x10,0x28,0x58,0xE4,0x60,0xD0, // voiced
0x02,0x3F,0x60,0xE0,0x40,0x18,0x40,0x20,0x60,0xD0,0x12,0x24,0x5B,0xA8, // voiced
0x02,0x9B,0xB0,0x50,0x18,0x40,0x28,0x0A,0x20,0x63,0xA3, // voiced
0x02,0x95,0x9C,0x60,0x18,0x68,0xD0,0x61,0xA5, // voiced
0x03,0x97,0xB0,0x50,0x18,0x60,0xD0,0x12,0x24,0x69,0xA2, // voiced
0x02,0x97,0x94,0x60,0x18,0x68,0xD4,0x0A,0x1C,0x6E,0xA0, // voiced
0x03,0xBE,0x7C,0x60,0x18,0x20,0x20,0x10,0x20,0x60,0xE0,0x68,0xD4, // voiced
0x02,0x9F,0x90,0x20,0x18,0x20,0x30,0x60,0xE4,0x6A,0xD4,0x63,0xA3, // voiced
0x00};

const uint8_t ER2_SP0[] = {
0x03,0xFF,0xB4,0x5B,0x40,0x18,0x40,0x20,0x20,0x30,0x60,0xE4,0x68,0xCC,0x5F,0xA5, // voiced
0x03,0x0E,0x10,0x28,0x58,0xE4,0x60,0xD0, // voiced
0x03,0xBF,0xB0,0x60,0xE0,0x40,0x18,0x40,0x28,0x60,0xD0,0x10,0x24,0x59,0xA9, // voiced
0x03,0x0B,0x40,0x20,0x12,0x24,0x5B,0xA8, // voiced
0x03,0x9B,0x9C,0x50,0x18,0x40,0x28,0x0A,0x20,0x63,0xA3, // voiced
0x03,0x15,0x60,0x18,0x68,0xD0,0x61,0xA5, // voiced
0x03,0x17,0x50,0x18,0x60,0xD0,0x12,0x24,0x69,0xA2, // voiced
0x04,0x97,0x94,0x60,0x18,0x68,0xD4,0x0A,0x1C,0x6E,0xA0, // voiced
0x04,0xBE,0x78,0x60,0x18,0x20,0x20,0x10,0x20,0x60,0xE0,0x68,0xD4, // voiced
0x04,0x9F,0x7C,0x20,0x18,0x20,0x30,0x60,0xE4,0x6A,0xD4,0x63,0xA3, // voiced
0x00};

const uint8_t OW_SP0[] = {
0x04,0xFE,0xB4,0x5B,0x60,0xA8,0x60,0xC0,0x60,0xF8,0x60,0x40,0x60,0x24, // voiced
0x04,0x88,0xB0,0x60,0x00, // voiced
0x02,0x80,0x9C, // voiced
0x06,0xB0,0x78,0x60,0xA0,0x60,0xB8, // voiced
0x02,0x00, // voiced
0x07,0x80,0x5C, // voiced
0x00};

const uint8_t DH2_SP0[] = {
0x12,0xFF,0x74,0x5B,0x30,0x08,0x30,0x18,0x40,0x38,0x30,0xEC,0x2E,0xD4,0x20,0xCB, // voiced
0x04,0xBF,0xB4,0x60,0x00,0x50,0x18,0x50,0x38,0x08,0xF4,0x5E,0xDC,0x5C,0xA1, // voiced
0x00};

const uint8_t SS_SP0[] = {
0x4B,0x87,0x5C,0x40,0x48,0x38,0x20,0x29,0xE3, // unvoiced
0x00};

const uint8_t NN2_SP0[] = {
0x05,0xFF,0x74,0x5B,0x30,0x00,0x20,0x18,0x40,0x38,0x60,0xFC,0x2A,0xE0,0x54,0xA1, // voiced
0x03,0xBF,0x78,0x30,0x08,0x30,0x20,0x10,0x20,0x68,0xFC,0x1C,0xE8,0x50,0xA2, // voiced
0x03,0x93,0x8C,0x40,0x20,0x24,0xE0,0x5B,0x9B, // voiced
0x04,0xBF,0xEC,0x40,0x10,0x40,0x18,0x30,0x30,0x68,0xF8,0x62,0xDC,0x50,0xA8, // voiced
0x02,0x2B,0x20,0x10,0x40,0x30,0x6E,0xD4,0x55,0xAC, // voiced
0x04,0x37,0x50,0x20,0x10,0x18,0x70,0xF8,0x6A,0xD0,0x58,0xAC, // voiced
0x00};

const uint8_t HH2_SP0[] = {
0x4F,0x87,0x0C,0x30,0x20,0x1E,0x00,0x48,0xC1, // unvoiced
0x05,0xFF,0x78,0x5B,0x40,0x00,0x60,0x20,0x50,0x38,0x18,0xE8,0x0A,0xE0,0x49,0xC2, // voiced
0x00};

const uint8_t OR_SP0[] = {
0x03,0xFF,0x58,0x5B,0x60,0xA0,0x60,0xA8,0x60,0xF8,0x20,0x10,0x60,0x20,0x57,0x37, // voiced
0x02,0x88,0x50,0x60,0xF0, // voiced
0x04,0x80,0x54, // voiced
0x04,0x90,0x7C,0x60,0xB0, // voiced
0x06,0x98,0x94,0x60,0xC0,0x60,0xE8, // voiced
0x05,0xB8,0x9C,0x60,0xA8,0x60,0xC8,0x60,0xE0, // voiced
0x05,0x10,0x60,0xD0, // voiced
0x02,0xA0,0x7C,0x60,0xA0, // voiced
0x04,0x80,0x58, // voiced
0x00};

const uint8_t AR_SP0[] = {
0x03,0xFF,0x90,0x5B,0x60,0x18,0x40,0x28,0x00,0x10,0x48,0xF0,0x64,0xBC,0x59,0xAC, // voiced
0x03,0xBB,0x94,0x60,0x10,0x40,0x20,0x10,0x18,0x62,0xBC,0x56,0xAF, // voiced
0x03,0xBF,0x98,0x50,0x10,0x30,0x20,0x10,0x20,0x48,0xEC,0x5E,0xC0,0x56,0xB0, // voiced
0x03,0xBF,0x94,0x50,0xF0,0x60,0x10,0x50,0x20,0x60,0xC0,0x02,0x10,0x51,0xB6, // voiced
0x03,0x3F,0x60,0xE8,0x60,0x18,0x50,0x28,0x60,0xC4,0x00,0x04,0x4A,0xB8, // voiced
0x04,0x3F,0x60,0x18,0x00,0x10,0x30,0x20,0x58,0xE8,0x62,0xC8,0x54,0xB5, // voiced
0x04,0xBF,0x7C,0x00,0x00,0x60,0x18,0x50,0x30,0x60,0xE4,0x58,0xCC,0x56,0xB5, // voiced
0x04,0x8B,0x78,0x40,0x28,0x5C,0xD0,0x59,0xB2, // voiced
0x04,0xBF,0x70,0x60,0xE8,0x60,0x10,0x20,0x20,0x60,0xCC,0xFC,0x04,0x55,0xB2, // voiced
0x00};

const uint8_t YR_SP0[] = {
0x04,0xFF,0xBC,0x5B,0x70,0x90,0x50,0xF0,0x30,0x00,0x18,0x04,0x4E,0x28,0x41,0x39, // voiced
0x03,0x90,0xD0,0x50,0xF8, // voiced
0x04,0x80,0xD4, // voiced
0x03,0x90,0xB4,0x50,0xF0, // voiced
0x04,0x38,0x70,0x98,0x50,0xE8,0x30,0xF8, // voiced
0x05,0xB8,0x98,0x70,0xA0,0x50,0xE0,0x30,0xF0, // voiced
0x06,0x10,0x50,0xD8, // voiced
0x06,0x80,0x94, // voiced
0x00};

const uint8_t GG2_SP0[] = {
0x85, // silence
0x45,0x87,0x1C,0x38,0x20,0x40,0xE0,0x1C,0xE6, // unvoiced
0x03,0xFF,0x98,0x5B,0x40,0xF8,0x60,0x18,0x50,0x38,0x18,0xF8,0x5C,0xD8,0x70,0xA1, // voiced
0x00};

const uint8_t EL_SP0[] = {
0x06,0xFF,0xB8,0x5B,0x40,0x18,0x50,0x28,0x20,0x20,0x68,0xFC,0x60,0xC4,0x64,0xA3, // voiced
0x04,0xBF,0x98,0x10,0x10,0x60,0x28,0x40,0x38,0x60,0xFC,0x62,0xC0,0x60,0xA3, // voiced
0x08,0xBF,0x90,0x60,0x28,0x10,0x18,0x30,0x30,0x60,0x00,0x60,0xC0,0x68,0xA0, // voiced
0x00};

const uint8_t BB2_SP0[] = {
0x85, // silence
0x42,0x87,0x18,0x30,0x20,0x24,0xFC,0x43,0xDE, // unvoiced
0x03,0xFF,0xD4,0x5B,0x50,0x20,0x40,0x30,0x10,0x18,0x68,0xF8,0x6E,0xE0,0x6C,0x99, // voiced
0x00};

const uint8_t OW_SJ[] = {
0x0C,0xFE,0xB4,0x5B,0x60,0xA8,0x60,0xC0,0x60,0xF8,0x60,0x40,0x60,0x24, // voiced
0x00};

const uint8_t RR_SJ[] = {
0x08,0xFF,0xB4,0x5B,0x40,0x08,0x30,0x20,0x30,0x38,0x48,0xDC,0x58,0xBC,0x54,0xA4, // voiced
0x00};

const uint8_t UH_SJ[] = {
0x0C,0xFF,0xB4,0x5B,0x60,0xF0,0x60,0x18,0x40,0x20,0x60,0xD8,0x0C,0x20,0x61,0x9D, // voiced
0x00};

const uint8_t* ALL_SP0[] = {
    PA1_SP0,
    PA2_SP0,
    PA3_SP0,
    PA4_SP0,
    PA5_SP0,
    OY_SP0,
    AY_SP0,
    EH_SP0,
    KK3_SP0,
    PP_SP0,
    JH_SP0,
    NN1_SP0,
    IH_SP0,
    TT2_SP0,
    RR1_SP0,
    AX_SP0,
    MM_SP0,
    TT1_SP0,
    DH1_SP0,
    IY_SP0,
    EY_SP0,
    DD1_SP0,
    UW1_SP0,
    AO_SP0,
    AA_SP0,
    YY2_SP0,
    AE_SP0,
    HH1_SP0,
    BB1_SP0,
    TH_SP0,
    UH_SP0,
    UW2_SP0,
    AW_SP0,
    DD2_SP0,
    GG3_SP0,
    VV_SP0,
    GG1_SP0,
    SH_SP0,
    ZH_SP0,
    RR2_SP0,
    FF_SP0,
    KK2_SP0,
    KK1_SP0,
    ZZ_SP0,
    NG_SP0,
    LL_SP0,
    WW_SP0,
    XR_SP0,
    WH_SP0,
    YY1_SP0,
    CH_SP0,
    ER1_SP0,
    ER2_SP0,
    OW_SP0,
    DH2_SP0,
    SS_SP0,
    NN2_SP0,
    HH2_SP0,
    OR_SP0,
    AR_SP0,
    YR_SP0,
    GG2_SP0,
    EL_SP0,
    BB2_SP0,

    OW_SJ,
    RR_SJ,
    UH_SJ,  // 66
};

/* ======================================================================== */
/*  qtbl  -- Coefficient Quantization Table.  This comes from a             */
/*              SP0250 data sheet, and should be correct for SP0256.        */
/* ======================================================================== */

static const int16_t qtbl[128] =
{
    0,      9,      17,     25,     33,     41,     49,     57,
    65,     73,     81,     89,     97,     105,    113,    121,
    129,    137,    145,    153,    161,    169,    177,    185,
    193,    201,    209,    217,    225,    233,    241,    249,
    257,    265,    273,    281,    289,    297,    301,    305,
    309,    313,    317,    321,    325,    329,    333,    337,
    341,    345,    349,    353,    357,    361,    365,    369,
    373,    377,    381,    385,    389,    393,    397,    401,
    405,    409,    413,    417,    421,    425,    427,    429,
    431,    433,    435,    437,    439,    441,    443,    445,
    447,    449,    451,    453,    455,    457,    459,    461,
    463,    465,    467,    469,    471,    473,    475,    477,
    479,    481,    482,    483,    484,    485,    486,    487,
    488,    489,    490,    491,    492,    493,    494,    495,
    496,    497,    498,    499,    500,    501,    502,    503,
    504,    505,    506,    507,    508,    509,    510,    511
};


// TODO
// Pitch/amp interpolation

class RetroVox
{
    int _pitch;
    int _speed;
    int _volume;
    int _delta;     //
    int _cmd;

    const uint8_t* _ptr;
    uint8_t     _buf[16];

    // from Zbiciak
    int16_t     repeat;         // Repeat counter,
    int16_t     cnt;            // Period down-counter
    int16_t     period;         // pitch period
    uint32_t    lfsr;           // Random Number Generator
    int16_t     amp;            // linear amplitude
    int16_t     f_coef[6];      // F0 through F5.
    int16_t     b_coef[6];      // B0 through B5.
    int16_t     z_data[6][2];   // Time-delay data for the filter stages

public:
    RetroVox() : _pitch(88),_speed(114),_volume(128),_delta(0),_cmd(0),_ptr(0),repeat(0)
    {
    }

    void set_params(const uint8_t* r)
    {
        amp = (r[0] & 0x1F) << ((r[0] & 0xE0) >> 5);     // 3:5 floating point amplitude
        period = r[1];                                   // pitch period
       // printf("a:%d p:%d\n",amp,period);

       // printf("period: %d\n",period); 64 or 96 for emphasis
        cnt = 0;
        amp = (amp * _volume) >> 7;

        // TODO
        if (period) {
            //  repeat = (repeat * period)/_speed;        //
           // int s = (repeat * period*2)/(_speed + 64);     // TODO
           // repeat = s;
            //if (_pitch != 88)
           //     period = 10000/_pitch;                     // TODO
        } else {
           // int s = (repeat * 64*2)/(_speed + 64);     // TODO unvoiced?
           // repeat = s;
        }

        if (_delta) {
            if (_delta == 1)
                repeat = (repeat + 1) >> 1;              // 1/2  time next allophone
            else
                repeat = (3*repeat + 1) >> 1;           // 3/2
            _delta = 0;
        }

        for (int i = 0; i < 6; i++)
        {
            #define IQ(x) (((x) & 0x80) ? qtbl[0x7F & -(x)] : -qtbl[(x)])
            b_coef[i] = IQ(r[2 + 2*i]);
            f_coef[i] = IQ(r[3 + 2*i]);
        }
    }

    int noise()
    {
        int bit = lfsr & 1;
        lfsr = (lfsr >> 1) ^ (bit ? 0x4001 : 0);    // LFSR
        return bit ? amp : -amp;
    }

    void update_period()
    {
    }

    int sample()
    {
        if (repeat <= 0) {
            if (!next())
                return 0x8000;
        }
        
        int j,samp;
        if (period)
        {
            if (cnt <= 0)               // voiced
            {
                if (repeat <= 0)
                    return 0x8000;      // nothing left
                update_period();
                cnt += period;          // pitch period
                repeat--;
                for (j = 0; j < 6; j++)
                    z_data[j][0] = z_data[j][1] = 0;
                samp = amp;             // PULSE
            } else {
                samp = 0;
                cnt--;
            }
        } else {                        // pitch period == 0 - unvoiced
            if (--cnt <= 0)
            {
                if (repeat <= 0)
                    return 0x8000;      // nothing left
                cnt = 64;               // noise period is 64
                repeat--;
                for (j = 0; j < 6; j++)
                    z_data[j][0] = z_data[j][1] = 0;
            }
            samp = noise();
        }

        for (j = 0; j < 6; j++)
        {
            int bw = b_coef[j];
            int fr = f_coef[j];
            fr *= 2;
            samp += (bw * z_data[j][1]) >> 9;
            samp += (fr * z_data[j][0]) >> 9;
            z_data[j][1] = z_data[j][0];
            z_data[j][0] = samp;
        }
        return samp << 2;
    }

    uint8_t u8()
    {
        return *_ptr++;
    }

    // get the next repeat frame
    int next(int first = 0)
    {
        repeat = 0;
        if (!*_ptr)
            return 0;   // done
        int r = u8();
        int i;
        uint8_t m;
        repeat = r & 0x3F;
        switch (r >> 6) {
            case 0:     // VOICED
            case 1:     // UNVOICED
                m = u8();
                if (m & 0x80)
                    _buf[0] = u8();  // amp
                if (m & 0x40)
                    _buf[1] = u8();   // pitch
                i = 2;
                m <<= 2;
                while (m & 0xFF) {                     // updated co-efficients
                    if (m & 0x80) {
                        _buf[i+0] = u8();
                        _buf[i+1] = u8();
                    }
                    m <<= 1;
                    i += 2;
                }
                break;
            case 2:
                _buf[0] = 0;
                _buf[1] = 64;                   // silence period
                break;
            case 3:
                //ctrl(r & 0x3F);
                break;
        }
        set_params(_buf);
        return repeat;
    }

    void silence(int silence_periods)
    {
        repeat = silence_periods;
        _buf[0] = 0;
        _buf[1] = 64;
        set_params(_buf);
    }

    void cmd(uint8_t p)
    {
        // last write
        if (_cmd) {
            switch (_cmd) {
                case VOLUME:        _volume = p; break;
                case SPEED:         _speed = p; break;
                case PITCH:         _pitch = p; break;
                case SPEED_SHORT:   _delta = p; break;
                case SILENCE:       silence(p); break;
            }
            _cmd = 0;
            return;
        }

        // start write
        if (p >= VOLUME) {
            _cmd = p;
            return;
        }

        _ptr = ALL_SP0[p];
        memset(_buf,0,16);
        printf("%s\n",_retro_phonemes[p]);
        next(1);
    }
};

RetroVox vox;
void retro_vox_cmd(uint8_t cmd)
{
    vox.cmd(cmd);
}

int16_t retro_vox_sample()
{
    return vox.sample();
}

const char* retro_name(int ph)
{
    if (ph >= 0 && ph < 64)
        return _retro_phonemes[ph];
    return "";
}

int8_t retro_phone(const char* s)
{
    for (int i = 0; i < 64; i++)
        if (strcmp(s,_retro_phonemes[i]) == 0)
            return i;
    return -1;
}

int vox_main(int argc, const char * argv[])
{
    return 0;
}

int cheep_main(int argc, const char * argv[])
{
    return 0;
}
